:PROPERTIES:
:ID:       4E2E6F0C-7921-4292-8530-E499362D9433
:END:
#+title: ~/.vim
#+date: 2010-07-06
#+OPTIONS: toc:nil

In my time using Vim, I switched between MacVim, regular Vim and NeoVim, project drawers and fuzzy file finding, Janus and custom configurations, and so on.
My current configuration is a result of that journey which tries to stay light on plugins and key mapping, while still providing a somewhat modern editor configuration.

My [[http://github.com/jeffkreeftmeijer/.vim][Vim configuration]] is extracted from this document[fn:2010], meaning both should remain in sync.
Unless I'm experimenting with something locally that I haven't pushed yet, this document describes the configuration I'm currently using in my editor.

[fn:2010] Initially, this configuration didn't exist in this form, but I've published my Vim configuration in one way or another since 2010.
This document is the current revision.


#+toc: headlines

* NeoVim

Recent versions of Vim caught up to most features NeoVim introduced, like true color support, background jobs and the inline terminal.
However, NeoVim comes with [[https://github.com/neovim/neovim/issues/2676][sensible defaults]] out of the box by implementing most of [[https://github.com/tpope/vim-sensible][vim-sensible]] by default.

As a good starting point, either install Vim both and vim-sensible, or NeoVim.
This configuration chooses the latter.

#+headers: :cache yes
#+headers: :results output
#+headers: :prologue brew uninstall neovim > /dev/null
#+begin_src shell
  brew install neovim
#+end_src

#+RESULTS[5c5fde03521443ab0ae71daa9659f8d7955d6088]:
: ==> Downloading https://ghcr.io/v2/homebrew/core/neovim/manifests/0.5.0
: Already downloaded: /Users/jeffkreeftmeijer/Library/Caches/Homebrew/downloads/7720be5c43b475c91b5ae8b501f18845a1d36959250cba180975f35495243c99--neovim-0.5.0.bottle_manifest.json
: ==> Downloading https://ghcr.io/v2/homebrew/core/neovim/blobs/sha256:13d31cb537237f3b9245c6c2de0e55ae4d7730d06742aec5a3e98a5365934eae
: Already downloaded: /Users/jeffkreeftmeijer/Library/Caches/Homebrew/downloads/5e5a426fbb645f1c4a8c3b26c138ae8e8298c4b73a8e7969bae1fe0e6a2ba507--neovim--0.5.0.catalina.bottle.tar.gz
: ==> Pouring neovim--0.5.0.catalina.bottle.tar.gz
: üç∫  /usr/local/Cellar/neovim/0.5.0: 1,543 files, 21.2MB
  
#+headers: :exports both
#+headers: :results output
#+begin_src shell
  nvim --version | head -n1
#+end_src

#+RESULTS:
: NVIM v0.5.0

* Package management

Vim 8 and NeoVim have a native package manager, which loads plugins from the =~/.vim/pack/plugins/start= directory[fn:plugins-dir].
To install a package, clone its repository into =~/.vim/pack/plugins/start=:

#+begin_src shell :eval no
  git clone git@github.com:tpope/vim-commentary.git ~/.vim/pack/plugins/start/vim-commentary
#+end_src

When publishing dotfiles to a repository for reuse, it's convenient to use Git submodules instead of regular checkouts.
This allows for checking the dependencies into version control.
Instead of cloning, add a plugin as a submodule:

#+begin_src shell :eval no
  git submodule add git@github.com:tpope/vim-commentary.git ~/.vim/pack/plugins/start/vim-commentary
#+end_src

Another option for installing plugins is using a plugin manager like [[https://github.com/junegunn/vim-plug][vim-plug]].
Instead of using Git checkouts or submodules, vim-plug handles the installing and updating of plugins.

The plugins themselves are configured through a list of calls to the =Plug= function in the =~/.vimrc= file:

#+begin_src vimrc :eval no
  Plug 'tpope/vim-commentary'
#+end_src

This configuration uses the latter in an attempt to contain most of the configuration in a single file.

** Vim-plug

[[https://github.com/junegunn/vim-plug#vim][Vim-plug's documentation]] mentions installing the plugin into the autoload directory directly by running a script that downloads =plug.org= to the =~/.vim/autoload= directory:

#+begin_src shell :eval no
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
#+end_src

Instead, to have Vim install vim-plug on startup (again, to contain the configuration to a single file), this snippet automatically downloads =plug.vim= from its repository if it doesn't exist yet:

#+caption: =~/.vimrc=, downloading and installing vim-plug
#+begin_src vimrc :tangle .vimrc
  " Download plug.vim if it doesn't exist yet
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  endif
#+end_src

Normally, plugins are installed when calling =:PlugInstall= from within Vim.
To remove an extra step from the setup, this configuration runs a script on startup that checks for missing packages on startup and install them if needed:

#+caption: =~/.vimrc=, automatically installing plugins when starting Vim
#+begin_src vimrc :tangle .vimrc
" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source ~/.vimrc
\| endif
#+end_src

All other plugins are installed through vim-plug.

** Installing packages

#+begin_note
This configuration is built to support both Vim and NeoVim.
It keeps its configuration files in Vim's traditional locations, so the configuration is in =~/.vimrc=, and Vim's home directory is =~/.vim=, instead of NeoVim's =~/.config/vim/init.vim= and =~/.config/vim=.
This works because NeoVim falls back to Vim's defaults, so it reads configuration from both places.

However, this causes an error when trying to install plugins, as Vim doesn't automatically load vim-plug:

#+begin_example
Error detected while processing /Users/jeffkreeftmeijer/.config/nvim/init.vim:
line   15:
E117: Unknown function: plug#begin
line   17:
E492: Not an editor command: Plug 'sheerun/vim-polyglot'
line   19:
E117: Unknown function: plug#end
Error detected while processing VimEnter Autocommands for "*":
E121: Undefined variable: g:plugs
Press ENTER or type command to continue
#+end_example

Although NeoVim loads the configuration from =~/.vimrc=, it doesn't add =~/.vim= to the runtime path automatically, meaning the =plug.vim= file in the =~/.vim/autoload= directory is not loaded when trying to define a list of plugins to install.

This configuration adds =~/.vimrc= to the runtime path /before/ the vim-plug block to remedy that:

#+caption: =~/.vimrc=, adding the =~/.vim= directory to the runtime path
#+begin_src vimrc :tangle .vimrc
  " Add ~/.vim to the runtime path
  set runtimepath +=~/.vim
#+end_src
#+end_note

To install plugins with vim-plug, call the =Plug= function inside the plug-block:

#+begin_src vimrc :eval no
  call plug#begin()
  
  " TODO Add plugins
  
  call plug#end()
#+end_src

The =plug#begin()= function sets up the plugin directory[fn:default-plug-dir] and the =plug#end()= function initializes the plugin system.

To install a plugin, call the =Plug= function /inside/ the plug-block with an URL to a git repository:

#+begin_src vimrc :eval no
  Plug 'tpope/vim-commentary'
#+end_src

The =user/repository= assumes the plugin is hosted on GitHub.

* Packages

This configuration includes 1 package installed with vim-plug:

#+begin_src vimrc :tangle .vimrc :noweb yes
  call plug#begin()
  
  <<polyglot>>
  
  call plug#end()
#+end_src

** Polyglot

[[https://github.com/sheerun/vim-polyglot][Polyglot]] is a curated and frequently updated list [[https://github.com/sheerun/vim-polyglot#language-packs][list of more than 600 language packs]][fn:polyglot-add] to auto-load syntax highlighting and indentation rules.
Although the packs are downloaded on install, they're loaded on demand, so using Polyglot does not affect Vim's startup time.

[fn:polyglot-add] Polyglot should have all languages you need.
For language packs that aren't yet included, add them by sending a pull request.
For example, [[https://github.com/sheerun/vim-polyglot/pull/655][this pull request]] adds support for [[https://gleam.run][Gleam]] through [[https://github.com/gleam-lang/gleam.vim][gleam.vim.]]

#+name: polyglot
#+begin_src vimrc :eval no
  Plug 'sheerun/vim-polyglot'
#+end_src

** Dim

** vim-nightfall

** vim-surround

** vim-commentary

** vim-numbertoggle

[[id:ABED24AB-F56D-4D23-BA8F-683BC6BB5831][Vim's absolute, relative and hybrid line numbers]]

** coc.nvim

** fzf.vim

[fn:plugins-dir] The name of the =start= directory in =~/.vim/pack/plugins/start= can be anything, but "start" seems to make sense.
[fn:default-plug-dir] Vim-plug uses the =~/.vim/plugged= directory by default, but passing a different path to =plug#begin()= overwrites the plugin directory.
